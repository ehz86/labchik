import shutil
import pandas as pd

from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QPushButton, QLabel, QLineEdit, QDialog, QFileDialog, \
    QMessageBox, QTableView, QInputDialog
from PyQt5.QtSql import QSqlDatabase, QSqlQuery, QSqlTableModel
import sys
import uuid
from datetime import datetime
import os





class DatabaseApp(QWidget):
    def __init__(self):
        super().__init__()

        self.db_name = ''
        self.table_name = ''
        self.connection = None

        self.create_db_button = QPushButton('‚ûïüìÑ –°–æ–∑–¥–∞—Ç—å –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö', self)
        self.open_db_table_button = QPushButton('üìÇ –û—Ç–∫—Ä—ã—Ç—å –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—É', self)
        self.add_data_button = QPushButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', self)
        self.delete_data_button = QPushButton('üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏', self)
        self.search_data_button = QPushButton('üîé –ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é', self)
        self.edit_data_button = QPushButton('‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å', self)
        self.delete_db_button = QPushButton('‚ùå –£–¥–∞–ª–∏—Ç—å –ë–î', self)
        self.clear_table_button = QPushButton('üÜë –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É', self)
        self.backup_button = QPushButton('üôÇ –°–æ–∑–¥–∞—Ç—å Backup', self)
        self.restore_button = QPushButton('ü§® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ Backup', self)
        self.save_button = QPushButton('üò¥ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª', self)

        self.search_result_window = None

        self.create_db_button.clicked.connect(self.create_database)
        self.open_db_table_button.clicked.connect(self.open_database_and_table)
        self.add_data_button.clicked.connect(self.show_data_form)
        self.delete_data_button.clicked.connect(self.delete_data)
        self.search_data_button.clicked.connect(self.search_data)
        self.edit_data_button.clicked.connect(self.edit_data)
        self.delete_db_button.clicked.connect(self.delete_database)
        self.clear_table_button.clicked.connect(self.clear_table)
        self.backup_button.clicked.connect(self.create_backup)
        self.restore_button.clicked.connect(self.restore_backup)
        self.save_button.clicked.connect(self.save_database)


        self.add_data_button.setEnabled(False)
        self.delete_data_button.setEnabled(False)
        self.search_data_button.setEnabled(False)
        self.edit_data_button.setEnabled(False)
        self.delete_db_button.setEnabled(False)
        self.clear_table_button.setEnabled(False)
        self.backup_button.setEnabled(False)
        self.restore_button.setEnabled(False)
        self.save_button.setEnabled(False)



        layout = QVBoxLayout()
        layout.addWidget(self.create_db_button)
        layout.addWidget(self.open_db_table_button)
        layout.addWidget(self.add_data_button)
        layout.addWidget(self.delete_data_button)
        layout.addWidget(self.search_data_button)
        layout.addWidget(self.edit_data_button)
        layout.addWidget(self.delete_db_button)
        layout.addWidget(self.clear_table_button)
        layout.addWidget(self.backup_button)
        layout.addWidget(self.restore_button)
        layout.addWidget(self.save_button)


        self.setLayout(layout)
    def clear_table(self):
        if not self.db_name:
            return

        query = QSqlQuery(self.connection)

        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
        if query.prepare(f"DELETE FROM {self.table_name}"):
            if not query.exec_():
                print("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:", query.lastError().text())
            else:
                print("–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")

            query.finish()


    def create_database(self):
        db_name, ok_pressed = QFileDialog.getSaveFileName(self, '–°–æ–∑–¥–∞—Ç—å –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö', "", "SQLite Database Files (*.db);;All Files (*)")
        if ok_pressed and db_name:
            self.db_name = db_name

            default_table_name = "Table_" + datetime.now().strftime("%Y%m%d_%H%M%S")
            table_name, ok_pressed = QInputDialog.getText(self, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã', '–ò–º—è —Ç–∞–±–ª–∏—Ü—ã:', QLineEdit.Normal, default_table_name)
            if ok_pressed and table_name:
                self.table_name = table_name

                self.connection = QSqlDatabase.addDatabase("QSQLITE", str(uuid.uuid4()))
                self.connection.setDatabaseName(self.db_name)

                if not self.connection.open():
                    print("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    return

                query = QSqlQuery(self.connection)
                query.exec(f"CREATE TABLE IF NOT EXISTS {self.table_name} (id INTEGER PRIMARY KEY UNIQUE, name TEXT, age INTEGER, city TEXT)")

                self.connection.close()

                self.add_data_button.setEnabled(True)
                self.delete_data_button.setEnabled(True)
                self.search_data_button.setEnabled(True)
                self.edit_data_button.setEnabled(True)
                self.delete_db_button.setEnabled(True)
                self.clear_table_button.setEnabled(True)
                self.backup_button.setEnabled(True)
                self.restore_button.setEnabled(True)
                self.save_button.setEnabled(True)

    def save_database(self):
        if not self.db_name:
            return

        file_path, _ = QFileDialog.getSaveFileName(self, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞', '',
                                                   'Excel Files (*.xlsx);;DB files (*.db);;CSV Files (*.csv)')

        if file_path:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
                query = QSqlQuery(self.connection)
                query.prepare(f"SELECT * FROM {self.table_name}")
                if not query.exec_():
                    print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", query.lastError().text())
                    return

                data = []
                while query.next():
                    record = query.record()
                    row_data = [record.value('id'), record.value('name'), record.value('age'),
                                record.value('city')]
                    data.append(row_data)

                columns = ['id', 'name', 'age', 'city']
                df = pd.DataFrame(data, columns=columns)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                if file_path.endswith('.xlsx'):
                    df.to_excel(file_path, index=False)
                elif file_path.endswith('.csv'):
                    df.to_csv(file_path, index=False)
                else:
                    print("–í—ã–±—Ä–∞–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                    return

                print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

    def create_backup(self):
        if not self.db_name:
            return

        backup_path, _ = QFileDialog.getSaveFileName(self, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è backup-—Ñ–∞–π–ª–∞', '',
                                                     'Backup Files (*.bak)')

        if backup_path:
            try:
                # –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ backup-—Ñ–∞–π–ª
                shutil.copy(self.db_name, backup_path)
                print(f"Backup-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {backup_path}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ backup-—Ñ–∞–π–ª–∞: {str(e)}")

    def restore_backup(self):
        if not self.db_name:
            return

        backup_path, _ = QFileDialog.getOpenFileName(self, '–í—ã–±–µ—Ä–∏—Ç–µ backup-—Ñ–∞–π–ª –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', '',
                                                     'Backup Files (*.bak)')

        if backup_path:
            try:
                # –ö–æ–ø–∏—Ä—É–µ–º backup-—Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                shutil.copy(backup_path, self.db_name)
                print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ backup-—Ñ–∞–π–ª–∞")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ backup-—Ñ–∞–π–ª–∞: {str(e)}")
    def open_database_and_table(self):
        db_name, _ = QFileDialog.getOpenFileName(self, "–û—Ç–∫—Ä—ã—Ç—å –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö", "", "SQLite Database Files (*.db);;All Files (*)")
        if db_name:
            self.db_name = db_name

            self.connection = QSqlDatabase.addDatabase("QSQLITE", str(uuid.uuid4()))
            self.connection.setDatabaseName(self.db_name)

            if not self.connection.open():
                print("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                return

            tables = self.connection.tables()
            if tables:
                table_name, ok_pressed = QInputDialog.getItem(self, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É', '–¢–∞–±–ª–∏—Ü—ã:', tables, 0, False)
                if ok_pressed:
                    self.table_name = table_name
                    self.add_data_button.setEnabled(True)
                    self.delete_data_button.setEnabled(True)
                    self.search_data_button.setEnabled(True)
                    self.edit_data_button.setEnabled(True)
                    self.delete_db_button.setEnabled(True)
                    self.clear_table_button.setEnabled(True)
                    self.backup_button.setEnabled(True)
                    self.restore_button.setEnabled(True)
                    self.save_button.setEnabled(True)
                    self.open_table()
            else:
                print("–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü")

    def open_table(self):
        if not self.db_name:
            return



    def show_data_form(self):
        if not self.db_name:
            return

        data_form = DataForm(self.db_name, self.table_name, self.connection, self)
        data_form.exec_()

    def delete_data(self):
        if not self.db_name or not self.table_name:
            return

        value, ok_pressed = QInputDialog.getText(self, '–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                                                 QLineEdit.Normal, '')
        if ok_pressed:
            query = QSqlQuery(self.connection)

            query.prepare(f"DELETE FROM {self.table_name} WHERE id = :value")
            query.bindValue(":value", value)

            if not query.exec_():
                print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", query.lastError().text())



            query.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞

            for field in ["name", "age", "city"]:
                query.prepare(
                    f"UPDATE {self.table_name} SET {field} = NULL WHERE {field} = :value AND id <> :value")
                query.bindValue(":value", value)
                query.bindValue(":key_value", value)

                if not query.exec_():
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª—è {field}:", query.lastError().text())
                query.finish()
    def search_data(self):
        if not self.db_name or not self.table_name:
            return

        value, ok_pressed = QInputDialog.getText(self, '–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö', '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:', QLineEdit.Normal,
                                                 '')
        if ok_pressed:
            query = QSqlQuery(self.connection)

            query.prepare(
                f"SELECT * FROM {self.table_name} WHERE id LIKE :value OR name LIKE :value OR age LIKE :value OR city LIKE :value")
            query.bindValue(":value", f"%{value}%")

            if not query.exec_():
                print("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:", query.lastError().text())
            else:
                search_result = []
                while query.next():
                    record = query.record()
                    result = f"id: {record.value('id')}, name: {record.value('name')}, age: {record.value('age')}, city: {record.value('city')}"
                    search_result.append(result)

                if search_result:
                    self.show_search_result(search_result)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                else:
                    QMessageBox.information(self, '–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö', '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')

                query.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞

    def show_search_result(self, search_result):
        if not self.search_result_window:
            self.search_result_window = SearchResultWindow(search_result)
            self.search_result_window.show()
        else:
            self.search_result_window.update_results(search_result)

    def edit_data(self):
        if not self.db_name or not self.table_name:
            return

        key_field_name = 'id'  # –ò–º—è –∫–ª—é—á–µ–≤–æ–≥–æ –ø–æ–ª—è
        current_key, ok_pressed = QInputDialog.getText(self, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
                                                       f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ id ({key_field_name}):',
                                                       QLineEdit.Normal, '')
        if not ok_pressed:
            return

        new_key, ok_pressed = QInputDialog.getText(self, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
                                                   f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ id ({key_field_name}):',
                                                   QLineEdit.Normal, '')
        if not ok_pressed:
            return

        new_field2_value, ok_pressed = QInputDialog.getText(self, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
                                                            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ name:', QLineEdit.Normal, '')
        if not ok_pressed:
            return

        new_field3_value, ok_pressed = QInputDialog.getText(self, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
                                                            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ age:', QLineEdit.Normal, '')
        if not ok_pressed:
            return

        new_field4_value, ok_pressed = QInputDialog.getText(self, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
                                                            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ city:', QLineEdit.Normal, '')
        if not ok_pressed:
            return

        query = QSqlQuery(self.connection)
        query.prepare(
            f"UPDATE {self.table_name} SET field1 = :new_key, field2 = :new_field2, field3 = :new_field3, field4 = :new_field4 WHERE field1 = :current_key")
        query.bindValue(":new_key", new_key)
        query.bindValue(":new_field2", new_field2_value)
        query.bindValue(":new_field3", new_field3_value)
        query.bindValue(":new_field4", new_field4_value)
        query.bindValue(":current_key", current_key)

        if not query.exec_():
            print("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", query.lastError().text())
        else:
            print("–î–∞–Ω–Ω—ã–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    def delete_database(self):
        reply = QMessageBox.question(self, '–£–¥–∞–ª–µ–Ω–∏–µ –ë–î', '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ë–î?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            if self.connection:
                self.connection.close()

            if os.path.exists(self.db_name):
                os.remove(self.db_name)

            self.db_name = ''
            self.table_name = ''
            self.add_data_button.setEnabled(False)
            self.delete_data_button.setEnabled(False)
            self.search_data_button.setEnabled(False)
            self.edit_data_button.setEnabled(False)
            self.delete_db_button.setEnabled(False)
class SearchResultWindow(QDialog):
    def __init__(self, initial_results, parent=None):
        super(SearchResultWindow, self).__init__(parent)
        self.results_layout = QVBoxLayout()
        self.setLayout(self.results_layout)
        self.update_results(initial_results)

    def update_results(self, results):
        for i in reversed(range(self.results_layout.count())):
            widget = self.results_layout.itemAt(i).widget()
            if widget:
                widget.setParent(None)

        for result in results:
            label = QLabel(result)
            self.results_layout.addWidget(label)
class DataForm(QDialog):
    def __init__(self, db_name, table_name, connection, parent):
        super().__init__(parent)

        self.db_name = db_name
        self.table_name = table_name
        self.connection = connection

        self.field1_edit = QLineEdit(self)
        self.field2_edit = QLineEdit(self)
        self.field3_edit = QLineEdit(self)
        self.field4_edit = QLineEdit(self)

        add_data_button = QPushButton('–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', self)
        add_data_button.clicked.connect(self.add_data)

        layout = QVBoxLayout()
        layout.addWidget(QLabel('ID (–∫–ª—é—á–µ–≤–æ–µ, —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ):'))
        layout.addWidget(self.field1_edit)
        layout.addWidget(QLabel('Name:'))
        layout.addWidget(self.field2_edit)
        layout.addWidget(QLabel('Age:'))
        layout.addWidget(self.field3_edit)
        layout.addWidget(QLabel('City:'))
        layout.addWidget(self.field4_edit)
        layout.addWidget(add_data_button)

        self.setLayout(layout)

    def add_data(self):
        if not self.connection or not self.connection.isValid() or not self.connection.open():
            print("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return

        query = QSqlQuery(self.connection)
        query.prepare(f"INSERT INTO {self.table_name} (id, name, age, city) VALUES (:id, :name, :age, :city)")
        query.bindValue(":id", self.field1_edit.text())
        query.bindValue(":name", self.field2_edit.text())
        query.bindValue(":age", self.field3_edit.text())
        query.bindValue(":city", self.field4_edit.text())

        if not query.exec_():
            error_message = query.lastError().text()
            if "UNIQUE constraint failed" in error_message:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏", "–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            else:
                print("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", error_message)
        else:
            print("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        self.accept()

class TableDialog(QDialog):
    def __init__(self, db_name, table_name, connection):
        super().__init__()

        self.db_name = db_name
        self.table_name = table_name
        self.connection = connection

        self.table_model = QSqlTableModel()
        self.table_model.setTable(self.table_name)
        self.table_model.setEditStrategy(QSqlTableModel.OnFieldChange)
        self.table_model.select()

        table_view = QTableView(self)
        table_view.setModel(self.table_model)

        delete_record_button = QPushButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', self)
        delete_record_button.clicked.connect(self.delete_selected_record)

        layout = QVBoxLayout()
        layout.addWidget(table_view)
        layout.addWidget(delete_record_button)
        self.setLayout(layout)

    def delete_selected_record(self, table_view=None):
        selected_indexes = table_view.selectionModel().selectedIndexes()
        if selected_indexes:
            for index in selected_indexes:
                row = index.row()
                self.table_model.removeRow(row)
                self.table_model.submitAll()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    main_app = DatabaseApp()
    main_app.show()
    sys.exit(app.exec_())
